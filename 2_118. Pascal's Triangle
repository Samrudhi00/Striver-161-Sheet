============================================BETTER======================================
class Solution {
public:
    int nCr(int n, int r) {
        long long res = 1;

        // calculating nCr:
        for (int i = 0; i < r; i++) {
            res = res * (n - i);
            res = res / (i + 1);
        }
        return res;
    }

    vector<vector<int>> generate(int numRows) {
        vector<vector<int>> result;

        for (int n = 0; n < numRows; n++) {
            vector<int> row;

            // generating the entire row n:
            for (int c = 0; c <= n; c++) {
                row.push_back(nCr(n, c));
            }

            result.push_back(row);
        }

        return result;
    }
};


==============================================OPTIMAL=======================================
//////////////////////     To find one single row      ///////////////////
void pascalTriangle(int n) {
    for (int line = 1; line <= n; line++) {
        long long ans = 1;

        // Print the first element in the line
        cout << ans << " ";

        // Calculate the rest of the line
        for (int i = 1; i <= line; i++) {
            ans = ans * (line - i);
            ans = ans / i;
            cout << ans << " ";
        }

        cout << endl;
    }
}
